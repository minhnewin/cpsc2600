//Name: Minh Nguyen
//Date: Friday March 4, 2022
//schedule.cpp

#include <iostream>
using namespace std;
#include "schedule.h"

//implement copy constructor
Schedule::Schedule(const Schedule& s)
{
  size = s.size;
  courses = new int*[size];
  for(int i = 0; i < size; i++) {
    courses[i] = new int[size];
  }
  for(int i = 0; i < size; i++){
    for(int j = 0; j < size; j++){
      courses[i][j] = s.courses[i][j];
    }
  }
  colors = new int[size];
  for(int i = 0; i < size; i++){
    colors[i] = s.colors[i];
  }
  maxColor = s.maxColor;
}

Schedule::Schedule(int n)
{
  size = n;
  
  courses = new int*[size];
  for(int i = 0; i < size; i++) {
    courses[i] = new int[size];
  }
  for(int i = 0; i < size; i++){
    for(int j = 0; j < size; j++){
      courses[i][j] = 0;
    }
  }
  
  colors = new int[size];
  maxColor = 1;
}

Schedule::~Schedule()
{
  delete [] courses;
  delete [] colors;
}

void Schedule::addEdge(int a, int b)
{
  courses[a][b] = 1;
  courses[b][a] = 1;
}

void Schedule::display() const
{
  cout << "   ";
  for(int i = 0; i < size; i++){
    cout << i << " ";
  }
  cout << endl;
  cout << "   ";
  for(int i = 0; i < size; i++){
    cout << "_" << " ";
  }
  cout << endl;
  for(int i = 0; i < size; i++){
    cout << i << "| ";
    for(int j = 0; j < size; j++){
      cout << courses[i][j] << " ";
    }
    cout << endl;
  }
}

bool Schedule::isAdjacent(int a, int b)
{
  if(courses[a][b] == 1)
    return true;
  else
    return false;
}
/*
void Schedule::iterate(int vCount, int ncount)
{
  colors[vCount] = ncount;
  cout << "before: " << colors[vCount] << endl;
  if(isAdjacent(vCount, ncount)){
    if(colors[vCount] == colors[ncount]){
      ncount++;
      iterate(vCount, ncount);
    }
  }
  cout << "after: " << colors[vCount] << endl;
}
*/
void Schedule::colorGraph()
{
  int num, min, newColor = 1;
  
  
  int* temp = new int[size];
  for(int i = 0; i < size; i++){
    colors[i] = -1;
  }
  colors[0] = 0;
  for(int i = 0; i < size; i++){
    temp[i] = colors[i];
  }

  for(int i = 0; i < size; i++){
    for(int j = 0; j < size; j++){
      if(isAdjacent(i, j)){
        num = colors[j];
        for(int k = 0; k < size; k++){
          if(num == temp[k]){
            temp[k] = -1;                 
          }
        }
      }
    }
    min = size;
    for(int l = 0; l < size; l++){
      if(temp[l] >= 0 && temp[l] < min){
        min = temp[l];
      }
    }
    if(min == size){
      colors[i] = newColor;
      newColor++;
    }
    else{
      colors[i] = min;
    }
    for(int m = 0; m < size; m++){
      temp[m] = colors[m];
    }
  }


  
  
  delete [] temp;
  
  
  
  /*
  
  int count = 0, colorCount, vertexCount = 1, adjCount = 0;
  bool* b = new bool[size];
  int* adj = new int[size];
  bool check = true;
  colors[0] = 0;
  
  for(int i = 0; i < size; i++){
    b[i] = false;
  }
  
  while(count != size - 1){
    adjCount = 0;
    check = true;
    colorCount = 0;
    if(count == 0 || isAdjacent(vertexCount, count)){
      colors[1] = 1;
    }else{
      colors[1] = 0;
    }
    for(int i = 0; i <= count; i++){
      if(isAdjacent(vertexCount, i)){
        for(int j = 0; j <= count; j++){
          if(colors[j] == colorCount){
            colorCount++;
          }
        }
      }
    }

    for(int i = count; i >= 0; i--){
      if(!isAdjacent(vertexCount, i)){
        colors[vertexCount] = i;
        check = false;
      }
    }
    
    cout << endl << "count: " << count << endl;
    cout << "vertexCount: " << vertexCount << endl;
    //check if any adjacent
    for(int i = count; i >= 0; i--){
      if(isAdjacent(vertexCount, i)){
        cout << "one adjacent" << endl;
        //check if color is same as the adjacent
        if(colors[vertexCount] == colors[i]){
          cout << "colors same!" << endl;
          for(int j = 0; j < size; j++){
            if(colors[i] == colors[j]){
              cout << "update adj" << endl;
              adj[adjCount] = j;
              adjCount++;
            }
          }
          cout << "adj[]" << endl;
          for(int i = 0; i < adjCount + 1; i++)
            cout << adj[i] << " ";
          cout << endl;
          
          for(int i = count; i >= 0; i--){
            if(colors[vertexCount] != adj[i])
              colors[vertexCount] = i;
          }
          int j = q - 1;
          colors[vCount] = j;
          if(colors[vCount] == colors[j] && colors[q] != colors[vCount])
            iterate(vCount, j);
           
          //if so change it to next lowest
          for(int j = size; j > 0; j--){
            if(colors[vertexCount] == colors[j] && !isAdjacent(vertexCount, j)){
              colors[vertexCount] = j;
              cout << "colors arr changed" << endl;
              cout << "new j: " << j << endl;
     
        }
      }
    }
    if(check){
      colors[vertexCount] = colorCount;
    }
    count++;
    vertexCount++;
  }
  delete [] b;
  delete [] adj;

  */
  
  //test colorGraph
  
  for(int i = 0; i < size; i++){
    if(colors[i] > maxColor)
      maxColor = colors[i];
  }
  
  cout << endl << "Testing colorGraph:" << endl;
  cout << "Colors = [";
  for(int i = 0; i < size; i++){
    cout << " c" << colors[i];
  }
  cout << " ]" << endl;
}

void Schedule::printSchedule()
{
  int count = 0;
  cout << endl << "Printing the exam schedule." << endl;
  
  while(count != maxColor + 1){
    cout << "Slot " << count + 1 << ": ";
    for(int i = 0; i < size; i++){
      if(colors[i] == count)
        cout << "course" << i << " ";
    }
    cout << endl;
    count++;
  }
  cout << endl;
}

int Schedule::degree(int i) const
{
  int count = 0;
  for(int j = 0; j < size; j++){
    if(courses[i][j] == 1)
      count++;
  }
  return count;
}
